{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CustomerSheetBeta = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _NativeStripeSdk = _interopRequireDefault(require(\"../NativeStripeSdk\"));\nvar eventEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.StripeSdk);\nvar fetchPaymentMethodsCallback = null;\nvar attachPaymentMethodCallback = null;\nvar detachPaymentMethodCallback = null;\nvar setSelectedPaymentOptionCallback = null;\nvar fetchSelectedPaymentOptionCallback = null;\nvar setupIntentClientSecretForCustomerAttachCallback = null;\nvar initialize = function () {\n  var _ref = (0, _asyncToGenerator2.default)(function* (params) {\n    var customerAdapterOverrides = {};\n    if (params.customerAdapter) {\n      customerAdapterOverrides = configureCustomerAdapterEventListeners(params.customerAdapter);\n    }\n    try {\n      var _yield$NativeStripeSd = yield _NativeStripeSdk.default.initCustomerSheet(params, customerAdapterOverrides),\n        error = _yield$NativeStripeSd.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {};\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function initialize(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar configureCustomerAdapterEventListeners = function configureCustomerAdapterEventListeners(customerAdapter) {\n  if (customerAdapter.fetchPaymentMethods) {\n    var _fetchPaymentMethodsC;\n    (_fetchPaymentMethodsC = fetchPaymentMethodsCallback) == null ? void 0 : _fetchPaymentMethodsC.remove();\n    fetchPaymentMethodsCallback = eventEmitter.addListener('onCustomerAdapterFetchPaymentMethodsCallback', (0, _asyncToGenerator2.default)(function* () {\n      if (customerAdapter.fetchPaymentMethods) {\n        var paymentMethods = yield customerAdapter.fetchPaymentMethods();\n        yield _NativeStripeSdk.default.customerAdapterFetchPaymentMethodsCallback(paymentMethods);\n      } else {\n        throw new Error('[@stripe/stripe-react-native] Tried to call `fetchPaymentMethods` on your CustomerAdapter, but no matching method was found.');\n      }\n    }));\n  }\n  if (customerAdapter.attachPaymentMethod) {\n    var _attachPaymentMethodC;\n    (_attachPaymentMethodC = attachPaymentMethodCallback) == null ? void 0 : _attachPaymentMethodC.remove();\n    attachPaymentMethodCallback = eventEmitter.addListener('onCustomerAdapterAttachPaymentMethodCallback', function () {\n      var _ref4 = (0, _asyncToGenerator2.default)(function* (_ref3) {\n        var paymentMethodId = _ref3.paymentMethodId;\n        if (customerAdapter.attachPaymentMethod) {\n          var paymentMethod = yield customerAdapter.attachPaymentMethod(paymentMethodId);\n          yield _NativeStripeSdk.default.customerAdapterAttachPaymentMethodCallback(paymentMethod);\n        } else {\n          throw new Error('[@stripe/stripe-react-native] Tried to call `attachPaymentMethod` on your CustomerAdapter, but no matching method was found.');\n        }\n      });\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  }\n  if (customerAdapter.detachPaymentMethod) {\n    var _detachPaymentMethodC;\n    (_detachPaymentMethodC = detachPaymentMethodCallback) == null ? void 0 : _detachPaymentMethodC.remove();\n    detachPaymentMethodCallback = eventEmitter.addListener('onCustomerAdapterDetachPaymentMethodCallback', function () {\n      var _ref6 = (0, _asyncToGenerator2.default)(function* (_ref5) {\n        var paymentMethodId = _ref5.paymentMethodId;\n        if (customerAdapter.detachPaymentMethod) {\n          var paymentMethod = yield customerAdapter.detachPaymentMethod(paymentMethodId);\n          yield _NativeStripeSdk.default.customerAdapterDetachPaymentMethodCallback(paymentMethod);\n        } else {\n          throw new Error('[@stripe/stripe-react-native] Tried to call `detachPaymentMethod` on your CustomerAdapter, but no matching method was found.');\n        }\n      });\n      return function (_x3) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n  }\n  if (customerAdapter.setSelectedPaymentOption) {\n    var _setSelectedPaymentOp;\n    (_setSelectedPaymentOp = setSelectedPaymentOptionCallback) == null ? void 0 : _setSelectedPaymentOp.remove();\n    setSelectedPaymentOptionCallback = eventEmitter.addListener('onCustomerAdapterSetSelectedPaymentOptionCallback', function () {\n      var _ref8 = (0, _asyncToGenerator2.default)(function* (_ref7) {\n        var paymentOption = _ref7.paymentOption;\n        if (customerAdapter.setSelectedPaymentOption) {\n          yield customerAdapter.setSelectedPaymentOption(paymentOption);\n          yield _NativeStripeSdk.default.customerAdapterSetSelectedPaymentOptionCallback();\n        } else {\n          throw new Error('[@stripe/stripe-react-native] Tried to call `setSelectedPaymentOption` on your CustomerAdapter, but no matching method was found.');\n        }\n      });\n      return function (_x4) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n  }\n  if (customerAdapter.fetchSelectedPaymentOption) {\n    var _fetchSelectedPayment;\n    (_fetchSelectedPayment = fetchSelectedPaymentOptionCallback) == null ? void 0 : _fetchSelectedPayment.remove();\n    fetchSelectedPaymentOptionCallback = eventEmitter.addListener('onCustomerAdapterFetchSelectedPaymentOptionCallback', (0, _asyncToGenerator2.default)(function* () {\n      if (customerAdapter.fetchSelectedPaymentOption) {\n        var paymentOption = yield customerAdapter.fetchSelectedPaymentOption();\n        yield _NativeStripeSdk.default.customerAdapterFetchSelectedPaymentOptionCallback(paymentOption);\n      } else {\n        throw new Error('[@stripe/stripe-react-native] Tried to call `fetchSelectedPaymentOption` on your CustomerAdapter, but no matching method was found.');\n      }\n    }));\n  }\n  if (customerAdapter.setupIntentClientSecretForCustomerAttach) {\n    var _setupIntentClientSec;\n    (_setupIntentClientSec = setupIntentClientSecretForCustomerAttachCallback) == null ? void 0 : _setupIntentClientSec.remove();\n    setupIntentClientSecretForCustomerAttachCallback = eventEmitter.addListener('onCustomerAdapterSetupIntentClientSecretForCustomerAttachCallback', (0, _asyncToGenerator2.default)(function* () {\n      if (customerAdapter.setupIntentClientSecretForCustomerAttach) {\n        var clientSecret = yield customerAdapter.setupIntentClientSecretForCustomerAttach();\n        yield _NativeStripeSdk.default.customerAdapterSetupIntentClientSecretForCustomerAttachCallback(clientSecret);\n      } else {\n        throw new Error('[@stripe/stripe-react-native] Tried to call `setupIntentClientSecretForCustomerAttach` on your CustomerAdapter, but no matching method was found.');\n      }\n    }));\n  }\n  return {\n    fetchPaymentMethods: !!customerAdapter.fetchPaymentMethods,\n    attachPaymentMethod: !!customerAdapter.attachPaymentMethod,\n    detachPaymentMethod: !!customerAdapter.detachPaymentMethod,\n    setSelectedPaymentOption: !!customerAdapter.setSelectedPaymentOption,\n    fetchSelectedPaymentOption: !!customerAdapter.fetchSelectedPaymentOption,\n    setupIntentClientSecretForCustomerAttach: !!customerAdapter.setupIntentClientSecretForCustomerAttach\n  };\n};\nvar present = function () {\n  var _ref11 = (0, _asyncToGenerator2.default)(function* () {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      return yield _NativeStripeSdk.default.presentCustomerSheet(params);\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function present() {\n    return _ref11.apply(this, arguments);\n  };\n}();\nvar retrievePaymentOptionSelection = function () {\n  var _ref12 = (0, _asyncToGenerator2.default)(function* () {\n    try {\n      return yield _NativeStripeSdk.default.retrieveCustomerSheetPaymentOptionSelection();\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function retrievePaymentOptionSelection() {\n    return _ref12.apply(this, arguments);\n  };\n}();\nfunction CustomerSheet(_ref13) {\n  var visible = _ref13.visible,\n    presentationStyle = _ref13.presentationStyle,\n    animationStyle = _ref13.animationStyle,\n    style = _ref13.style,\n    appearance = _ref13.appearance,\n    setupIntentClientSecret = _ref13.setupIntentClientSecret,\n    customerId = _ref13.customerId,\n    customerEphemeralKeySecret = _ref13.customerEphemeralKeySecret,\n    merchantDisplayName = _ref13.merchantDisplayName,\n    headerTextForSelectionScreen = _ref13.headerTextForSelectionScreen,\n    defaultBillingDetails = _ref13.defaultBillingDetails,\n    billingDetailsCollectionConfiguration = _ref13.billingDetailsCollectionConfiguration,\n    returnURL = _ref13.returnURL,\n    removeSavedPaymentMethodMessage = _ref13.removeSavedPaymentMethodMessage,\n    applePayEnabled = _ref13.applePayEnabled,\n    googlePayEnabled = _ref13.googlePayEnabled,\n    timeout = _ref13.timeout,\n    onResult = _ref13.onResult,\n    customerAdapter = _ref13.customerAdapter;\n  _react.default.useEffect(function () {\n    if (visible) {\n      initialize({\n        style: style,\n        appearance: appearance,\n        setupIntentClientSecret: setupIntentClientSecret,\n        customerId: customerId,\n        customerEphemeralKeySecret: customerEphemeralKeySecret,\n        merchantDisplayName: merchantDisplayName,\n        headerTextForSelectionScreen: headerTextForSelectionScreen,\n        defaultBillingDetails: defaultBillingDetails,\n        billingDetailsCollectionConfiguration: billingDetailsCollectionConfiguration,\n        returnURL: returnURL,\n        removeSavedPaymentMethodMessage: removeSavedPaymentMethodMessage,\n        applePayEnabled: applePayEnabled,\n        googlePayEnabled: googlePayEnabled,\n        customerAdapter: customerAdapter\n      }).then(function (initResult) {\n        if (initResult.error) {\n          onResult(initResult);\n        } else {\n          present({\n            timeout: timeout,\n            presentationStyle: presentationStyle,\n            animationStyle: animationStyle\n          }).then(function (presentResult) {\n            onResult(presentResult);\n          });\n        }\n      });\n    }\n  }, [visible]);\n  return null;\n}\nvar CustomerSheetBeta = {\n  CustomerSheet: CustomerSheet,\n  initialize: initialize,\n  present: present,\n  retrievePaymentOptionSelection: retrievePaymentOptionSelection\n};\nexports.CustomerSheetBeta = CustomerSheetBeta;","map":{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_NativeStripeSdk","eventEmitter","NativeEventEmitter","NativeModules","StripeSdk","fetchPaymentMethodsCallback","attachPaymentMethodCallback","detachPaymentMethodCallback","setSelectedPaymentOptionCallback","fetchSelectedPaymentOptionCallback","setupIntentClientSecretForCustomerAttachCallback","initialize","_ref","_asyncToGenerator2","default","params","customerAdapterOverrides","customerAdapter","configureCustomerAdapterEventListeners","_yield$NativeStripeSd","initCustomerSheet","error","_x","apply","arguments","fetchPaymentMethods","_fetchPaymentMethodsC","remove","addListener","paymentMethods","customerAdapterFetchPaymentMethodsCallback","Error","attachPaymentMethod","_attachPaymentMethodC","_ref4","_ref3","paymentMethodId","paymentMethod","customerAdapterAttachPaymentMethodCallback","_x2","detachPaymentMethod","_detachPaymentMethodC","_ref6","_ref5","customerAdapterDetachPaymentMethodCallback","_x3","setSelectedPaymentOption","_setSelectedPaymentOp","_ref8","_ref7","paymentOption","customerAdapterSetSelectedPaymentOptionCallback","_x4","fetchSelectedPaymentOption","_fetchSelectedPayment","customerAdapterFetchSelectedPaymentOptionCallback","setupIntentClientSecretForCustomerAttach","_setupIntentClientSec","clientSecret","customerAdapterSetupIntentClientSecretForCustomerAttachCallback","present","_ref11","length","undefined","presentCustomerSheet","retrievePaymentOptionSelection","_ref12","retrieveCustomerSheetPaymentOptionSelection","CustomerSheet","_ref13","visible","presentationStyle","animationStyle","style","appearance","setupIntentClientSecret","customerId","customerEphemeralKeySecret","merchantDisplayName","headerTextForSelectionScreen","defaultBillingDetails","billingDetailsCollectionConfiguration","returnURL","removeSavedPaymentMethodMessage","applePayEnabled","googlePayEnabled","timeout","onResult","useEffect","then","initResult","presentResult","CustomerSheetBeta","exports"],"sources":["C:\\Users\\safirma\\Documents\\GitHub\\printabilty\\frontend\\node_modules\\@stripe\\stripe-react-native\\lib\\module\\components\\CustomerSheet.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  NativeEventEmitter,\n  NativeModules,\n  EmitterSubscription,\n} from 'react-native';\nimport NativeStripeSdk from '../NativeStripeSdk';\nimport type {\n  CustomerSheetInitParams,\n  CustomerSheetPresentParams,\n  CustomerSheetResult,\n  CustomerSheetError,\n  StripeError,\n  CustomerAdapter,\n} from '../types';\n\nconst eventEmitter = new NativeEventEmitter(NativeModules.StripeSdk);\nlet fetchPaymentMethodsCallback: EmitterSubscription | null = null;\nlet attachPaymentMethodCallback: EmitterSubscription | null = null;\nlet detachPaymentMethodCallback: EmitterSubscription | null = null;\nlet setSelectedPaymentOptionCallback: EmitterSubscription | null = null;\nlet fetchSelectedPaymentOptionCallback: EmitterSubscription | null = null;\nlet setupIntentClientSecretForCustomerAttachCallback: EmitterSubscription | null =\n  null;\n\n/** Initialize an instance of Customer Sheet with your desired configuration. */\nconst initialize = async (\n  params: CustomerSheetInitParams\n): Promise<{ error?: StripeError<CustomerSheetError> }> => {\n  let customerAdapterOverrides = {};\n  if (params.customerAdapter) {\n    customerAdapterOverrides = configureCustomerAdapterEventListeners(\n      params.customerAdapter\n    );\n  }\n\n  try {\n    const { error } = await NativeStripeSdk.initCustomerSheet(\n      params,\n      customerAdapterOverrides\n    );\n    if (error) {\n      return { error };\n    }\n    return {};\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nconst configureCustomerAdapterEventListeners = (\n  customerAdapter: CustomerAdapter\n): { [Property in keyof CustomerAdapter]: boolean } => {\n  if (customerAdapter.fetchPaymentMethods) {\n    fetchPaymentMethodsCallback?.remove();\n    fetchPaymentMethodsCallback = eventEmitter.addListener(\n      'onCustomerAdapterFetchPaymentMethodsCallback',\n      async () => {\n        if (customerAdapter.fetchPaymentMethods) {\n          const paymentMethods = await customerAdapter.fetchPaymentMethods();\n          await NativeStripeSdk.customerAdapterFetchPaymentMethodsCallback(\n            paymentMethods\n          );\n        } else {\n          throw new Error(\n            '[@stripe/stripe-react-native] Tried to call `fetchPaymentMethods` on your CustomerAdapter, but no matching method was found.'\n          );\n        }\n      }\n    );\n  }\n\n  if (customerAdapter.attachPaymentMethod) {\n    attachPaymentMethodCallback?.remove();\n    attachPaymentMethodCallback = eventEmitter.addListener(\n      'onCustomerAdapterAttachPaymentMethodCallback',\n      async ({ paymentMethodId }: { paymentMethodId: string }) => {\n        if (customerAdapter.attachPaymentMethod) {\n          const paymentMethod = await customerAdapter.attachPaymentMethod(\n            paymentMethodId\n          );\n          await NativeStripeSdk.customerAdapterAttachPaymentMethodCallback(\n            paymentMethod\n          );\n        } else {\n          throw new Error(\n            '[@stripe/stripe-react-native] Tried to call `attachPaymentMethod` on your CustomerAdapter, but no matching method was found.'\n          );\n        }\n      }\n    );\n  }\n\n  if (customerAdapter.detachPaymentMethod) {\n    detachPaymentMethodCallback?.remove();\n    detachPaymentMethodCallback = eventEmitter.addListener(\n      'onCustomerAdapterDetachPaymentMethodCallback',\n      async ({ paymentMethodId }: { paymentMethodId: string }) => {\n        if (customerAdapter.detachPaymentMethod) {\n          const paymentMethod = await customerAdapter.detachPaymentMethod(\n            paymentMethodId\n          );\n          await NativeStripeSdk.customerAdapterDetachPaymentMethodCallback(\n            paymentMethod\n          );\n        } else {\n          throw new Error(\n            '[@stripe/stripe-react-native] Tried to call `detachPaymentMethod` on your CustomerAdapter, but no matching method was found.'\n          );\n        }\n      }\n    );\n  }\n\n  if (customerAdapter.setSelectedPaymentOption) {\n    setSelectedPaymentOptionCallback?.remove();\n    setSelectedPaymentOptionCallback = eventEmitter.addListener(\n      'onCustomerAdapterSetSelectedPaymentOptionCallback',\n      async ({ paymentOption }: { paymentOption: string }) => {\n        if (customerAdapter.setSelectedPaymentOption) {\n          await customerAdapter.setSelectedPaymentOption(paymentOption);\n          await NativeStripeSdk.customerAdapterSetSelectedPaymentOptionCallback();\n        } else {\n          throw new Error(\n            '[@stripe/stripe-react-native] Tried to call `setSelectedPaymentOption` on your CustomerAdapter, but no matching method was found.'\n          );\n        }\n      }\n    );\n  }\n\n  if (customerAdapter.fetchSelectedPaymentOption) {\n    fetchSelectedPaymentOptionCallback?.remove();\n    fetchSelectedPaymentOptionCallback = eventEmitter.addListener(\n      'onCustomerAdapterFetchSelectedPaymentOptionCallback',\n      async () => {\n        if (customerAdapter.fetchSelectedPaymentOption) {\n          const paymentOption =\n            await customerAdapter.fetchSelectedPaymentOption();\n          await NativeStripeSdk.customerAdapterFetchSelectedPaymentOptionCallback(\n            paymentOption\n          );\n        } else {\n          throw new Error(\n            '[@stripe/stripe-react-native] Tried to call `fetchSelectedPaymentOption` on your CustomerAdapter, but no matching method was found.'\n          );\n        }\n      }\n    );\n  }\n\n  if (customerAdapter.setupIntentClientSecretForCustomerAttach) {\n    setupIntentClientSecretForCustomerAttachCallback?.remove();\n    setupIntentClientSecretForCustomerAttachCallback = eventEmitter.addListener(\n      'onCustomerAdapterSetupIntentClientSecretForCustomerAttachCallback',\n      async () => {\n        if (customerAdapter.setupIntentClientSecretForCustomerAttach) {\n          const clientSecret =\n            await customerAdapter.setupIntentClientSecretForCustomerAttach();\n          await NativeStripeSdk.customerAdapterSetupIntentClientSecretForCustomerAttachCallback(\n            clientSecret\n          );\n        } else {\n          throw new Error(\n            '[@stripe/stripe-react-native] Tried to call `setupIntentClientSecretForCustomerAttach` on your CustomerAdapter, but no matching method was found.'\n          );\n        }\n      }\n    );\n  }\n\n  return {\n    fetchPaymentMethods: !!customerAdapter.fetchPaymentMethods,\n    attachPaymentMethod: !!customerAdapter.attachPaymentMethod,\n    detachPaymentMethod: !!customerAdapter.detachPaymentMethod,\n    setSelectedPaymentOption: !!customerAdapter.setSelectedPaymentOption,\n    fetchSelectedPaymentOption: !!customerAdapter.fetchSelectedPaymentOption,\n    setupIntentClientSecretForCustomerAttach:\n      !!customerAdapter.setupIntentClientSecretForCustomerAttach,\n  };\n};\n\n/** Launches the Customer Sheet UI. */\nconst present = async (\n  params: CustomerSheetPresentParams = {}\n): Promise<CustomerSheetResult> => {\n  try {\n    return await NativeStripeSdk.presentCustomerSheet(params);\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\n/**\n * You can use this to obtain the selected payment method without presenting the CustomerSheet.\n * This will return an error if you have not called `.initialize`\n */\nconst retrievePaymentOptionSelection =\n  async (): Promise<CustomerSheetResult> => {\n    try {\n      return await NativeStripeSdk.retrieveCustomerSheetPaymentOptionSelection();\n    } catch (error: any) {\n      return {\n        error,\n      };\n    }\n  };\n\n/**\n *  Props\n */\nexport type Props = {\n  /** Whether the sheet is visible. Defaults to false. */\n  visible: boolean;\n  /** Called when the user submits, dismisses, or cancels the sheet, or when an error occurs. */\n  onResult: (result: CustomerSheetResult) => void;\n} & CustomerSheetInitParams &\n  CustomerSheetPresentParams;\n\n/**\n * A component wrapper around the Customer Sheet functions. Upon passing `true` to the `visible` prop,\n * Customer Sheet will call `initialize` and `present`, and the result(s) will be passed through to the\n * onResult callback.\n *\n * @example\n * ```ts\n *  const [selectedPaymentOption, setSelectedPaymentOption] = React.useState(null);\n *  const [customerSheetVisible, setCustomerSheetVisible] = React.useState(false);\n *\n *  return (\n *    <CustomerSheet\n *      visible={customerSheetVisible}\n *      customerEphemeralKeySecret={ephemeralKeySecret}\n *      customerId={customer}\n *      returnURL={'stripe-example://stripe-redirect'}\n *      onResult={({ error, paymentOption, paymentMethod }) => {\n *        setCustomerSheetVisible(false);\n *        if (error) {\n *          Alert.alert(error.code, error.localizedMessage);\n *        }\n *        if (paymentOption) {\n *          setSelectedPaymentOption(paymentOption);\n *          console.log(JSON.stringify(paymentOption, null, 2));\n *        }\n *        if (paymentMethod) {\n *          console.log(JSON.stringify(paymentMethod, null, 2));\n *        }\n *      }}\n *    />\n *  );\n * ```\n * @param __namedParameters Props\n * @returns JSX.Element\n * @category ReactComponents\n */\nfunction CustomerSheet({\n  visible,\n  presentationStyle,\n  animationStyle,\n  style,\n  appearance,\n  setupIntentClientSecret,\n  customerId,\n  customerEphemeralKeySecret,\n  merchantDisplayName,\n  headerTextForSelectionScreen,\n  defaultBillingDetails,\n  billingDetailsCollectionConfiguration,\n  returnURL,\n  removeSavedPaymentMethodMessage,\n  applePayEnabled,\n  googlePayEnabled,\n  timeout,\n  onResult,\n  customerAdapter,\n}: Props) {\n  React.useEffect(() => {\n    if (visible) {\n      initialize({\n        style,\n        appearance,\n        setupIntentClientSecret,\n        customerId,\n        customerEphemeralKeySecret,\n        merchantDisplayName,\n        headerTextForSelectionScreen,\n        defaultBillingDetails,\n        billingDetailsCollectionConfiguration,\n        returnURL,\n        removeSavedPaymentMethodMessage,\n        applePayEnabled,\n        googlePayEnabled,\n        customerAdapter,\n      }).then((initResult) => {\n        if (initResult.error) {\n          onResult(initResult);\n        } else {\n          present({\n            timeout,\n            presentationStyle,\n            animationStyle,\n          }).then((presentResult) => {\n            onResult(presentResult);\n          });\n        }\n      });\n    }\n    // Only run this hook when visible prop changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [visible]);\n\n  return null;\n}\n\n/**\n * The Customer Sheet is a prebuilt UI component that lets your customers manage their saved payment methods.\n */\nexport const CustomerSheetBeta = {\n  CustomerSheet,\n  initialize,\n  present,\n  retrievePaymentOptionSelection,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}