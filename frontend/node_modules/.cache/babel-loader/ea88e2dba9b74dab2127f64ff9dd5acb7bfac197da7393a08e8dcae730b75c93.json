{"ast":null,"code":"import { PaymentMethod } from \"@stripe/stripe-react-native\";\nimport { useCreatePaymemntIntentmutation } from \"../paymentApi\";\nconst total = 523640;\nconst [createPaymemntIntent] = useCreatePaymemntIntentmutation();\nconst {\n  initPaymentSheet,\n  presentPaymentSheet\n} = userStripe();\nconst onCheckout = async () => {\n  // 1. Create a payment intent\n  const response = await createPaymemntIntent({\n    amount: Math.floor(total * 100)\n  });\n  if (response.error) {\n    console.log(response.error);\n    Alert.alert('Something went wrong');\n    return;\n  }\n\n  // 2. Initialize the Payment sheet\n  const initResponse = await initPaymentSheet({\n    merchantDisplayName: 'Printabilty',\n    paymentIntentClientSecret: response.data.paymentIntent\n  });\n  if (initResponse.error) {\n    console.log(initResponse.error);\n    Alert.alert('Something went wrong');\n    return;\n  }\n\n  // 3. Present the Payment Sheet from Stripe\n  const paymentResponce = await presentPaymentSheet();\n  if (paymentResponce.error) {\n    Alert.alert(`Error code: ${paymentError.code}`, paymentError.message);\n    return;\n  }\n  // 4. If payment ok -> create the order\n  onCreateOrder();\n};\nconst onCreateOrder = async req => {\n  const resukt = await onCreateOrder({\n    fileName: req.body.fileName,\n    printPrice: req.body.price\n  });\n};\nexport default Payments;","map":{"version":3,"names":["PaymentMethod","useCreatePaymemntIntentmutation","total","createPaymemntIntent","initPaymentSheet","presentPaymentSheet","userStripe","onCheckout","response","amount","Math","floor","error","console","log","Alert","alert","initResponse","merchantDisplayName","paymentIntentClientSecret","data","paymentIntent","paymentResponce","paymentError","code","message","onCreateOrder","req","resukt","fileName","body","printPrice","price","Payments"],"sources":["C:/Users/safirma/Documents/GitHub/printabilty/frontend/src/Payments/pages/printing_details_page.js"],"sourcesContent":["import { PaymentMethod } from \"@stripe/stripe-react-native\";\r\nimport { useCreatePaymemntIntentmutation} from \"../paymentApi\";\r\n\r\nconst total = 523640\r\nconst [createPaymemntIntent] = useCreatePaymemntIntentmutation();\r\nconst { initPaymentSheet, presentPaymentSheet} = userStripe();\r\nconst onCheckout = async () => {\r\n    // 1. Create a payment intent\r\n   const response = await createPaymemntIntent({amount: Math.floor(total * 100)});\r\n   if (response.error) {\r\n        console.log(response.error);\r\n        Alert.alert('Something went wrong');\r\n        return;\r\n   }\r\n\r\n    // 2. Initialize the Payment sheet\r\n    const initResponse = await initPaymentSheet({\r\n        merchantDisplayName: 'Printabilty',\r\n        paymentIntentClientSecret: response.data.paymentIntent,\r\n\r\n    });\r\n    if (initResponse.error) {\r\n        console.log(initResponse.error);\r\n        Alert.alert('Something went wrong');\r\n        return;\r\n    }\r\n    \r\n    // 3. Present the Payment Sheet from Stripe\r\n    const paymentResponce = await presentPaymentSheet();\r\n    if (paymentResponce.error) {\r\n        Alert.alert(\r\n            `Error code: ${paymentError.code}`, \r\n            paymentError.message\r\n        );\r\n        return;\r\n    }\r\n    // 4. If payment ok -> create the order\r\n    onCreateOrder();\r\n  };\r\n\r\n  const onCreateOrder = async (req) => {\r\n    const resukt = await onCreateOrder({\r\n        fileName: req.body.fileName,\r\n        printPrice: req.body.price,\r\n    })\r\n  };\r\n\r\n  export default Payments;"],"mappings":"AAAA,SAASA,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,+BAA+B,QAAO,eAAe;AAE9D,MAAMC,KAAK,GAAG,MAAM;AACpB,MAAM,CAACC,oBAAoB,CAAC,GAAGF,+BAA+B,CAAC,CAAC;AAChE,MAAM;EAAEG,gBAAgB;EAAEC;AAAmB,CAAC,GAAGC,UAAU,CAAC,CAAC;AAC7D,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC3B;EACD,MAAMC,QAAQ,GAAG,MAAML,oBAAoB,CAAC;IAACM,MAAM,EAAEC,IAAI,CAACC,KAAK,CAACT,KAAK,GAAG,GAAG;EAAC,CAAC,CAAC;EAC9E,IAAIM,QAAQ,CAACI,KAAK,EAAE;IACfC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACI,KAAK,CAAC;IAC3BG,KAAK,CAACC,KAAK,CAAC,sBAAsB,CAAC;IACnC;EACL;;EAEC;EACA,MAAMC,YAAY,GAAG,MAAMb,gBAAgB,CAAC;IACxCc,mBAAmB,EAAE,aAAa;IAClCC,yBAAyB,EAAEX,QAAQ,CAACY,IAAI,CAACC;EAE7C,CAAC,CAAC;EACF,IAAIJ,YAAY,CAACL,KAAK,EAAE;IACpBC,OAAO,CAACC,GAAG,CAACG,YAAY,CAACL,KAAK,CAAC;IAC/BG,KAAK,CAACC,KAAK,CAAC,sBAAsB,CAAC;IACnC;EACJ;;EAEA;EACA,MAAMM,eAAe,GAAG,MAAMjB,mBAAmB,CAAC,CAAC;EACnD,IAAIiB,eAAe,CAACV,KAAK,EAAE;IACvBG,KAAK,CAACC,KAAK,CACN,eAAcO,YAAY,CAACC,IAAK,EAAC,EAClCD,YAAY,CAACE,OACjB,CAAC;IACD;EACJ;EACA;EACAC,aAAa,CAAC,CAAC;AACjB,CAAC;AAED,MAAMA,aAAa,GAAG,MAAOC,GAAG,IAAK;EACnC,MAAMC,MAAM,GAAG,MAAMF,aAAa,CAAC;IAC/BG,QAAQ,EAAEF,GAAG,CAACG,IAAI,CAACD,QAAQ;IAC3BE,UAAU,EAAEJ,GAAG,CAACG,IAAI,CAACE;EACzB,CAAC,CAAC;AACJ,CAAC;AAED,eAAeC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}