{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.usePlatformPay = usePlatformPay;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = require(\"react\");\nvar _useStripe2 = require(\"./useStripe\");\nfunction usePlatformPay() {\n  var _useStripe = (0, _useStripe2.useStripe)(),\n    isPlatformPaySupported = _useStripe.isPlatformPaySupported,\n    confirmPlatformPaySetupIntent = _useStripe.confirmPlatformPaySetupIntent,\n    confirmPlatformPayPayment = _useStripe.confirmPlatformPayPayment,\n    createPlatformPayPaymentMethod = _useStripe.createPlatformPayPaymentMethod,\n    createPlatformPayToken = _useStripe.createPlatformPayToken,\n    dismissPlatformPay = _useStripe.dismissPlatformPay,\n    updatePlatformPaySheet = _useStripe.updatePlatformPaySheet,\n    canAddCardToWallet = _useStripe.canAddCardToWallet,\n    openPlatformPaySetup = _useStripe.openPlatformPaySetup;\n  var _useState = (0, _react.useState)(false),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1];\n  var _isPlatformPaySupported = (0, _react.useCallback)(function () {\n    var _ref = (0, _asyncToGenerator2.default)(function* (params) {\n      setLoading(true);\n      var result = yield isPlatformPaySupported(params);\n      setLoading(false);\n      return result;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [isPlatformPaySupported]);\n  var _confirmPlatformPaySetupIntent = (0, _react.useCallback)(function () {\n    var _ref2 = (0, _asyncToGenerator2.default)(function* (clientSecret, params) {\n      setLoading(true);\n      var result = yield confirmPlatformPaySetupIntent(clientSecret, params);\n      setLoading(false);\n      return result;\n    });\n    return function (_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [confirmPlatformPaySetupIntent]);\n  var _confirmPlatformPayPayment = (0, _react.useCallback)(function () {\n    var _ref3 = (0, _asyncToGenerator2.default)(function* (clientSecret, params) {\n      setLoading(true);\n      var result = yield confirmPlatformPayPayment(clientSecret, params);\n      setLoading(false);\n      return result;\n    });\n    return function (_x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [confirmPlatformPayPayment]);\n  var _createPlatformPayPaymentMethod = (0, _react.useCallback)(function () {\n    var _ref4 = (0, _asyncToGenerator2.default)(function* (params) {\n      setLoading(true);\n      var result = yield createPlatformPayPaymentMethod(params);\n      setLoading(false);\n      return result;\n    });\n    return function (_x6) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [createPlatformPayPaymentMethod]);\n  var _createPlatformPayToken = (0, _react.useCallback)(function () {\n    var _ref5 = (0, _asyncToGenerator2.default)(function* (params) {\n      setLoading(true);\n      var result = yield createPlatformPayToken(params);\n      setLoading(false);\n      return result;\n    });\n    return function (_x7) {\n      return _ref5.apply(this, arguments);\n    };\n  }(), [createPlatformPayToken]);\n  var _dismissPlatformPay = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {\n    setLoading(true);\n    var result = yield dismissPlatformPay();\n    setLoading(false);\n    return result;\n  }), [dismissPlatformPay]);\n  var _updatePlatformPaySheet = (0, _react.useCallback)(function () {\n    var _ref7 = (0, _asyncToGenerator2.default)(function* (params) {\n      setLoading(true);\n      var result = yield updatePlatformPaySheet(params);\n      setLoading(false);\n      return result;\n    });\n    return function (_x8) {\n      return _ref7.apply(this, arguments);\n    };\n  }(), [updatePlatformPaySheet]);\n  var _canAddCardToWallet = (0, _react.useCallback)(function () {\n    var _ref8 = (0, _asyncToGenerator2.default)(function* (params) {\n      setLoading(true);\n      var result = yield canAddCardToWallet(params);\n      setLoading(false);\n      return result;\n    });\n    return function (_x9) {\n      return _ref8.apply(this, arguments);\n    };\n  }(), [canAddCardToWallet]);\n  var _openPlatformPaySetup = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {\n    return openPlatformPaySetup();\n  }), [openPlatformPaySetup]);\n  return {\n    loading: loading,\n    isPlatformPaySupported: _isPlatformPaySupported,\n    confirmPlatformPaySetupIntent: _confirmPlatformPaySetupIntent,\n    confirmPlatformPayPayment: _confirmPlatformPayPayment,\n    createPlatformPayPaymentMethod: _createPlatformPayPaymentMethod,\n    createPlatformPayToken: _createPlatformPayToken,\n    dismissPlatformPay: _dismissPlatformPay,\n    updatePlatformPaySheet: _updatePlatformPaySheet,\n    canAddCardToWallet: _canAddCardToWallet,\n    openPlatformPaySetup: _openPlatformPaySetup\n  };\n}","map":{"version":3,"names":["_react","require","_useStripe2","usePlatformPay","_useStripe","useStripe","isPlatformPaySupported","confirmPlatformPaySetupIntent","confirmPlatformPayPayment","createPlatformPayPaymentMethod","createPlatformPayToken","dismissPlatformPay","updatePlatformPaySheet","canAddCardToWallet","openPlatformPaySetup","_useState","useState","_useState2","_slicedToArray2","default","loading","setLoading","_isPlatformPaySupported","useCallback","_ref","_asyncToGenerator2","params","result","_x","apply","arguments","_confirmPlatformPaySetupIntent","_ref2","clientSecret","_x2","_x3","_confirmPlatformPayPayment","_ref3","_x4","_x5","_createPlatformPayPaymentMethod","_ref4","_x6","_createPlatformPayToken","_ref5","_x7","_dismissPlatformPay","_updatePlatformPaySheet","_ref7","_x8","_canAddCardToWallet","_ref8","_x9","_openPlatformPaySetup"],"sources":["C:\\Users\\safirma\\Documents\\GitHub\\printabilty\\frontend\\node_modules\\@stripe\\stripe-react-native\\lib\\module\\hooks\\usePlatformPay.tsx"],"sourcesContent":["import { useCallback, useState } from 'react';\nimport type {\n  PlatformPay,\n  CanAddCardToWalletParams,\n  CanAddCardToWalletResult,\n} from '../types';\nimport { useStripe } from './useStripe';\n\n/**\n * usePlatformPay hook. Access all Apple and Google Pay functionality with this hook.\n */\nexport function usePlatformPay() {\n  const {\n    isPlatformPaySupported,\n    confirmPlatformPaySetupIntent,\n    confirmPlatformPayPayment,\n    createPlatformPayPaymentMethod,\n    createPlatformPayToken,\n    dismissPlatformPay,\n    updatePlatformPaySheet,\n    canAddCardToWallet,\n    openPlatformPaySetup,\n  } = useStripe();\n  const [loading, setLoading] = useState(false);\n\n  const _isPlatformPaySupported = useCallback(\n    async (params?: { googlePay?: PlatformPay.IsGooglePaySupportedParams }) => {\n      setLoading(true);\n\n      const result = await isPlatformPaySupported(params);\n      setLoading(false);\n\n      return result;\n    },\n    [isPlatformPaySupported]\n  );\n\n  const _confirmPlatformPaySetupIntent = useCallback(\n    async (clientSecret: string, params: PlatformPay.ConfirmParams) => {\n      setLoading(true);\n\n      const result = await confirmPlatformPaySetupIntent(clientSecret, params);\n      setLoading(false);\n\n      return result;\n    },\n    [confirmPlatformPaySetupIntent]\n  );\n\n  const _confirmPlatformPayPayment = useCallback(\n    async (clientSecret: string, params: PlatformPay.ConfirmParams) => {\n      setLoading(true);\n\n      const result = await confirmPlatformPayPayment(clientSecret, params);\n      setLoading(false);\n\n      return result;\n    },\n    [confirmPlatformPayPayment]\n  );\n\n  const _createPlatformPayPaymentMethod = useCallback(\n    async (params: PlatformPay.PaymentMethodParams) => {\n      setLoading(true);\n\n      const result = await createPlatformPayPaymentMethod(params);\n      setLoading(false);\n\n      return result;\n    },\n    [createPlatformPayPaymentMethod]\n  );\n\n  const _createPlatformPayToken = useCallback(\n    async (params: PlatformPay.PaymentMethodParams) => {\n      setLoading(true);\n\n      const result = await createPlatformPayToken(params);\n      setLoading(false);\n\n      return result;\n    },\n    [createPlatformPayToken]\n  );\n\n  const _dismissPlatformPay = useCallback(async () => {\n    setLoading(true);\n\n    const result = await dismissPlatformPay();\n    setLoading(false);\n\n    return result;\n  }, [dismissPlatformPay]);\n\n  const _updatePlatformPaySheet = useCallback(\n    async (params: {\n      applePay: {\n        cartItems: Array<PlatformPay.CartSummaryItem>;\n        shippingMethods: Array<PlatformPay.ShippingMethod>;\n        errors: Array<PlatformPay.ApplePaySheetError>;\n      };\n    }) => {\n      setLoading(true);\n\n      const result = await updatePlatformPaySheet(params);\n      setLoading(false);\n\n      return result;\n    },\n    [updatePlatformPaySheet]\n  );\n\n  const _canAddCardToWallet = useCallback(\n    async (\n      params: CanAddCardToWalletParams\n    ): Promise<CanAddCardToWalletResult> => {\n      setLoading(true);\n\n      const result = await canAddCardToWallet(params);\n      setLoading(false);\n\n      return result;\n    },\n    [canAddCardToWallet]\n  );\n\n  const _openPlatformPaySetup = useCallback(async (): Promise<void> => {\n    return openPlatformPaySetup();\n  }, [openPlatformPaySetup]);\n\n  return {\n    /** Use this boolean to present a spinner or other similar loading screen. `true` if the SDK is currently processing, `false` if it is not. */\n    loading,\n    /**\n     * Check if the relevant native wallet (Apple Pay on iOS, Google Pay on Android) is supported.\n     * @returns A boolean indicating whether or not the native wallet is supported.\n     */\n    isPlatformPaySupported: _isPlatformPaySupported,\n    /**\n     * Launches the relevant native wallet sheet (Apple Pay on iOS, Google Pay on Android) in order to confirm a Stripe [SetupIntent](https://stripe.com/docs/api/setup_intents).\n     * @param clientSecret The client secret of the SetupIntent.\n     * @param params an object describing the Apple Pay and Google Pay configurations.\n     * @returns An object with an error field if something went wrong or the flow was cancelled, otherwise an object with both `setupIntent` and `paymentMethod` fields.\n     */\n    confirmPlatformPaySetupIntent: _confirmPlatformPaySetupIntent,\n    /**\n     * Launches the relevant native wallet sheet (Apple Pay on iOS, Google Pay on Android) in order to confirm a Stripe [PaymentIntent](https://stripe.com/docs/api/payment_intents).\n     * @param clientSecret The client secret of the PaymentIntent.\n     * @param params an object describing the Apple Pay and Google Pay configurations.\n     * @returns An object with an error field if something went wrong or the flow was cancelled, otherwise an object with both `paymentIntent` and `paymentMethod` fields.\n     */\n    confirmPlatformPayPayment: _confirmPlatformPayPayment,\n    /**\n     * Launches the relevant native wallet sheet (Apple Pay on iOS, Google Pay on Android) in order to create a Stripe [PaymentMethod](https://stripe.com/docs/api/payment_methods) and [token](https://stripe.com/docs/api/tokens).\n     * @param params an object describing the Apple Pay and Google Pay configurations.\n     * @returns An object with an error field if something went wrong or the flow was cancelled, otherwise an object with both `paymentMethod` and `token` fields.\n     */\n    createPlatformPayPaymentMethod: _createPlatformPayPaymentMethod,\n    /**\n     * @deprecated The Tokens API is deprecated, you should use Payment Methods and `createPlatformPayPaymentMethod` instead.  Launches the relevant native wallet sheet (Apple Pay on iOS, Google Pay on Android) in order to create a Stripe [token](https://stripe.com/docs/api/tokens).\n     * @param params an object describing the Apple Pay and Google Pay configurations.\n     * @returns An object with an error field if something went wrong or the flow was cancelled, otherwise an object with a `token` field.\n     */\n    createPlatformPayToken: _createPlatformPayToken,\n    /**\n     * Dismiss the Apple Pay sheet if it is open. iOS only, this is a no-op on Android.\n     * @returns A boolean indicating whether or not the sheet was successfully closed. Will return false if the Apple Pay sheet was not open.\n     */\n    dismissPlatformPay: _dismissPlatformPay,\n    /**\n     * Update different items on the Apple Pay sheet, including the summary items, the shipping methods, and any errors shown. iOS only, this is a no-op on Android.\n     * @param cartItems An array of payment summary items to display in the Apple Pay sheet.\n     * @param shippingMethods An array of shipping methods to display in the Apple Pay sheet.\n     * @param errors An array of errors associated with the user's input that must be corrected to proceed with payment. These errors will be shown in the Apple Pay sheet.\n     *\n     * @returns An object with an optional 'error' field, which is only populated if something went wrong.\n     */\n    updatePlatformPaySheet: _updatePlatformPaySheet,\n    /**\n     * Check if the app & device support adding this card to the native wallet.\n     * @param params An object containing fields for `primaryAccountIdentifier`, `cardLastFour`, and `testEnv`.\n     *\n     * @returns A promise resolving to an object of type CanAddCardToWalletResult. Check the `canAddCard` field, if it's true, you should show the `<AddToWalletButton />`\n     */\n    canAddCardToWallet: _canAddCardToWallet,\n    /**\n     * iOS only, this is a no-op on Android. Use this method to move users to the interface for adding credit cards.\n     * This method transfers control to the Wallet app on iPhone or to the Settings\n     * app on iPad. For devices that don’t support Apple Pay, this method does nothing.\n     */\n    openPlatformPaySetup: _openPlatformPaySetup,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}