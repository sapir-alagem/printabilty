{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyMicrodepositsForSetup = exports.verifyMicrodepositsForPayment = exports.updatePlatformPaySheet = exports.retrieveSetupIntent = exports.retrievePaymentIntent = exports.resetPaymentSheetCustomer = exports.presentPaymentSheet = exports.openPlatformPaySetup = exports.isPlatformPaySupported = exports.isCardInWallet = exports.initPaymentSheet = exports.handleURLCallback = exports.handleNextActionForSetup = exports.handleNextAction = exports.dismissPlatformPay = exports.createTokenForCVCUpdate = exports.createToken = exports.createPlatformPayToken = exports.createPlatformPayPaymentMethod = exports.createPaymentMethod = exports.confirmSetupIntent = exports.confirmPlatformPaySetupIntent = exports.confirmPlatformPayPayment = exports.confirmPaymentSheetPayment = exports.confirmPayment = exports.collectFinancialConnectionsAccounts = exports.collectBankAccountToken = exports.collectBankAccountForSetup = exports.collectBankAccountForPayment = exports.canAddCardToWallet = exports.Constants = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _helpers = require(\"./helpers\");\nvar _Errors = require(\"./types/Errors\");\nvar _NativeStripeSdk = _interopRequireDefault(require(\"./NativeStripeSdk\"));\nvar _reactNative = require(\"react-native\");\nvar createPaymentMethod = function () {\n  var _ref = (0, _asyncToGenerator2.default)(function* (params) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    try {\n      var _yield$NativeStripeSd = yield _NativeStripeSdk.default.createPaymentMethod(params, options),\n        paymentMethod = _yield$NativeStripeSd.paymentMethod,\n        error = _yield$NativeStripeSd.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        paymentMethod: paymentMethod\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function createPaymentMethod(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.createPaymentMethod = createPaymentMethod;\nvar createToken = function () {\n  var _ref2 = (0, _asyncToGenerator2.default)(function* (params) {\n    var _params$country;\n    if (params.type === 'BankAccount' && ((_params$country = params.country) == null ? void 0 : _params$country.toLowerCase()) === 'us' && !params.routingNumber) {\n      return {\n        error: _Errors.MissingRoutingNumber\n      };\n    }\n    try {\n      var _yield$NativeStripeSd2 = yield _NativeStripeSdk.default.createToken(params),\n        token = _yield$NativeStripeSd2.token,\n        error = _yield$NativeStripeSd2.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        token: token\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function createToken(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexports.createToken = createToken;\nvar retrievePaymentIntent = function () {\n  var _ref3 = (0, _asyncToGenerator2.default)(function* (clientSecret) {\n    try {\n      var _yield$NativeStripeSd3 = yield _NativeStripeSdk.default.retrievePaymentIntent(clientSecret),\n        paymentIntent = _yield$NativeStripeSd3.paymentIntent,\n        error = _yield$NativeStripeSd3.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        paymentIntent: paymentIntent\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function retrievePaymentIntent(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexports.retrievePaymentIntent = retrievePaymentIntent;\nvar retrieveSetupIntent = function () {\n  var _ref4 = (0, _asyncToGenerator2.default)(function* (clientSecret) {\n    try {\n      var _yield$NativeStripeSd4 = yield _NativeStripeSdk.default.retrieveSetupIntent(clientSecret),\n        setupIntent = _yield$NativeStripeSd4.setupIntent,\n        error = _yield$NativeStripeSd4.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        setupIntent: setupIntent\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function retrieveSetupIntent(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexports.retrieveSetupIntent = retrieveSetupIntent;\nvar confirmPayment = function () {\n  var _ref5 = (0, _asyncToGenerator2.default)(function* (paymentIntentClientSecret, params) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    try {\n      var _yield$NativeStripeSd5 = yield _NativeStripeSdk.default.confirmPayment(paymentIntentClientSecret, params, options),\n        paymentIntent = _yield$NativeStripeSd5.paymentIntent,\n        error = _yield$NativeStripeSd5.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        paymentIntent: paymentIntent\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function confirmPayment(_x5, _x6) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexports.confirmPayment = confirmPayment;\nvar handleNextAction = function () {\n  var _ref6 = (0, _asyncToGenerator2.default)(function* (paymentIntentClientSecret, returnURL) {\n    try {\n      var _ref7 = _reactNative.Platform.OS === 'ios' ? yield _NativeStripeSdk.default.handleNextAction(paymentIntentClientSecret, returnURL != null ? returnURL : null) : yield _NativeStripeSdk.default.handleNextAction(paymentIntentClientSecret),\n        paymentIntent = _ref7.paymentIntent,\n        error = _ref7.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        paymentIntent: paymentIntent\n      };\n    } catch (error) {\n      return {\n        error: (0, _helpers.createError)(error)\n      };\n    }\n  });\n  return function handleNextAction(_x7, _x8) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexports.handleNextAction = handleNextAction;\nvar handleNextActionForSetup = function () {\n  var _ref8 = (0, _asyncToGenerator2.default)(function* (setupIntentClientSecret, returnURL) {\n    try {\n      var _ref9 = _reactNative.Platform.OS === 'ios' ? yield _NativeStripeSdk.default.handleNextActionForSetup(setupIntentClientSecret, returnURL != null ? returnURL : null) : yield _NativeStripeSdk.default.handleNextActionForSetup(setupIntentClientSecret),\n        setupIntent = _ref9.setupIntent,\n        error = _ref9.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        setupIntent: setupIntent\n      };\n    } catch (error) {\n      return {\n        error: (0, _helpers.createError)(error)\n      };\n    }\n  });\n  return function handleNextActionForSetup(_x9, _x10) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexports.handleNextActionForSetup = handleNextActionForSetup;\nvar confirmSetupIntent = function () {\n  var _ref10 = (0, _asyncToGenerator2.default)(function* (paymentIntentClientSecret, params) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    try {\n      var _yield$NativeStripeSd6 = yield _NativeStripeSdk.default.confirmSetupIntent(paymentIntentClientSecret, params, options),\n        setupIntent = _yield$NativeStripeSd6.setupIntent,\n        error = _yield$NativeStripeSd6.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        setupIntent: setupIntent\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function confirmSetupIntent(_x11, _x12) {\n    return _ref10.apply(this, arguments);\n  };\n}();\nexports.confirmSetupIntent = confirmSetupIntent;\nvar createTokenForCVCUpdate = function () {\n  var _ref11 = (0, _asyncToGenerator2.default)(function* (cvc) {\n    try {\n      var _yield$NativeStripeSd7 = yield _NativeStripeSdk.default.createTokenForCVCUpdate(cvc),\n        tokenId = _yield$NativeStripeSd7.tokenId,\n        error = _yield$NativeStripeSd7.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        tokenId: tokenId\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function createTokenForCVCUpdate(_x13) {\n    return _ref11.apply(this, arguments);\n  };\n}();\nexports.createTokenForCVCUpdate = createTokenForCVCUpdate;\nvar handleURLCallback = function () {\n  var _ref12 = (0, _asyncToGenerator2.default)(function* (url) {\n    var stripeHandled = _reactNative.Platform.OS === 'ios' ? yield _NativeStripeSdk.default.handleURLCallback(url) : false;\n    return stripeHandled;\n  });\n  return function handleURLCallback(_x14) {\n    return _ref12.apply(this, arguments);\n  };\n}();\nexports.handleURLCallback = handleURLCallback;\nvar verifyMicrodepositsForPayment = function () {\n  var _ref13 = (0, _asyncToGenerator2.default)(function* (clientSecret, params) {\n    try {\n      var _ref14 = yield _NativeStripeSdk.default.verifyMicrodeposits(true, clientSecret, params),\n        paymentIntent = _ref14.paymentIntent,\n        error = _ref14.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        paymentIntent: paymentIntent\n      };\n    } catch (error) {\n      return {\n        error: (0, _helpers.createError)(error)\n      };\n    }\n  });\n  return function verifyMicrodepositsForPayment(_x15, _x16) {\n    return _ref13.apply(this, arguments);\n  };\n}();\nexports.verifyMicrodepositsForPayment = verifyMicrodepositsForPayment;\nvar verifyMicrodepositsForSetup = function () {\n  var _ref15 = (0, _asyncToGenerator2.default)(function* (clientSecret, params) {\n    try {\n      var _ref16 = yield _NativeStripeSdk.default.verifyMicrodeposits(false, clientSecret, params),\n        setupIntent = _ref16.setupIntent,\n        error = _ref16.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        setupIntent: setupIntent\n      };\n    } catch (error) {\n      return {\n        error: (0, _helpers.createError)(error)\n      };\n    }\n  });\n  return function verifyMicrodepositsForSetup(_x17, _x18) {\n    return _ref15.apply(this, arguments);\n  };\n}();\nexports.verifyMicrodepositsForSetup = verifyMicrodepositsForSetup;\nvar eventEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.StripeSdk);\nvar confirmHandlerCallback = null;\nvar orderTrackingCallbackListener = null;\nvar initPaymentSheet = function () {\n  var _ref17 = (0, _asyncToGenerator2.default)(function* (params) {\n    var _params$intentConfigu, _params$applePay;\n    var result;\n    var confirmHandler = params == null ? void 0 : (_params$intentConfigu = params.intentConfiguration) == null ? void 0 : _params$intentConfigu.confirmHandler;\n    if (confirmHandler) {\n      var _confirmHandlerCallba;\n      (_confirmHandlerCallba = confirmHandlerCallback) == null ? void 0 : _confirmHandlerCallba.remove();\n      confirmHandlerCallback = eventEmitter.addListener('onConfirmHandlerCallback', function (_ref18) {\n        var paymentMethod = _ref18.paymentMethod,\n          shouldSavePaymentMethod = _ref18.shouldSavePaymentMethod;\n        confirmHandler(paymentMethod, shouldSavePaymentMethod, _NativeStripeSdk.default.intentCreationCallback);\n      });\n    }\n    var orderTrackingCallback = params == null ? void 0 : (_params$applePay = params.applePay) == null ? void 0 : _params$applePay.setOrderTracking;\n    if (orderTrackingCallback) {\n      var _orderTrackingCallbac;\n      (_orderTrackingCallbac = orderTrackingCallbackListener) == null ? void 0 : _orderTrackingCallbac.remove();\n      orderTrackingCallbackListener = eventEmitter.addListener('onOrderTrackingCallback', function () {\n        orderTrackingCallback(_NativeStripeSdk.default.configureOrderTracking);\n      });\n    }\n    try {\n      if (_reactNative.Platform.OS === 'ios' && !params.returnURL) {\n        console.warn(\"[@stripe/stripe-react-native] You have not provided the 'returnURL' field to 'initPaymentSheet', so payment methods that require redirects will not be shown in your iOS Payment Sheet. Visit https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet#react-native-set-up-return-url to learn more.\");\n      }\n      result = yield _NativeStripeSdk.default.initPaymentSheet(params);\n      if (result.error) {\n        return {\n          error: result.error\n        };\n      }\n      return {\n        paymentOption: result.paymentOption\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function initPaymentSheet(_x19) {\n    return _ref17.apply(this, arguments);\n  };\n}();\nexports.initPaymentSheet = initPaymentSheet;\nvar presentPaymentSheet = function () {\n  var _ref19 = (0, _asyncToGenerator2.default)(function* () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      var _yield$NativeStripeSd8 = yield _NativeStripeSdk.default.presentPaymentSheet(options),\n        paymentOption = _yield$NativeStripeSd8.paymentOption,\n        error = _yield$NativeStripeSd8.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        paymentOption: paymentOption\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function presentPaymentSheet() {\n    return _ref19.apply(this, arguments);\n  };\n}();\nexports.presentPaymentSheet = presentPaymentSheet;\nvar confirmPaymentSheetPayment = function () {\n  var _ref20 = (0, _asyncToGenerator2.default)(function* () {\n    try {\n      var _yield$NativeStripeSd9 = yield _NativeStripeSdk.default.confirmPaymentSheetPayment(),\n        error = _yield$NativeStripeSd9.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {};\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function confirmPaymentSheetPayment() {\n    return _ref20.apply(this, arguments);\n  };\n}();\nexports.confirmPaymentSheetPayment = confirmPaymentSheetPayment;\nvar resetPaymentSheetCustomer = function () {\n  var _ref21 = (0, _asyncToGenerator2.default)(function* () {\n    return yield _NativeStripeSdk.default.resetPaymentSheetCustomer();\n  });\n  return function resetPaymentSheetCustomer() {\n    return _ref21.apply(this, arguments);\n  };\n}();\nexports.resetPaymentSheetCustomer = resetPaymentSheetCustomer;\nvar collectBankAccountForPayment = function () {\n  var _ref22 = (0, _asyncToGenerator2.default)(function* (clientSecret, params) {\n    try {\n      var _ref23 = yield _NativeStripeSdk.default.collectBankAccount(true, clientSecret, params),\n        paymentIntent = _ref23.paymentIntent,\n        error = _ref23.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        paymentIntent: paymentIntent\n      };\n    } catch (error) {\n      return {\n        error: (0, _helpers.createError)(error)\n      };\n    }\n  });\n  return function collectBankAccountForPayment(_x20, _x21) {\n    return _ref22.apply(this, arguments);\n  };\n}();\nexports.collectBankAccountForPayment = collectBankAccountForPayment;\nvar collectBankAccountForSetup = function () {\n  var _ref24 = (0, _asyncToGenerator2.default)(function* (clientSecret, params) {\n    try {\n      var _ref25 = yield _NativeStripeSdk.default.collectBankAccount(false, clientSecret, params),\n        setupIntent = _ref25.setupIntent,\n        error = _ref25.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        setupIntent: setupIntent\n      };\n    } catch (error) {\n      return {\n        error: (0, _helpers.createError)(error)\n      };\n    }\n  });\n  return function collectBankAccountForSetup(_x22, _x23) {\n    return _ref24.apply(this, arguments);\n  };\n}();\nexports.collectBankAccountForSetup = collectBankAccountForSetup;\nvar collectBankAccountToken = function () {\n  var _ref26 = (0, _asyncToGenerator2.default)(function* (clientSecret) {\n    try {\n      var _yield$NativeStripeSd10 = yield _NativeStripeSdk.default.collectBankAccountToken(clientSecret),\n        session = _yield$NativeStripeSd10.session,\n        token = _yield$NativeStripeSd10.token,\n        error = _yield$NativeStripeSd10.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        session: session,\n        token: token\n      };\n    } catch (error) {\n      return {\n        error: (0, _helpers.createError)(error)\n      };\n    }\n  });\n  return function collectBankAccountToken(_x24) {\n    return _ref26.apply(this, arguments);\n  };\n}();\nexports.collectBankAccountToken = collectBankAccountToken;\nvar collectFinancialConnectionsAccounts = function () {\n  var _ref27 = (0, _asyncToGenerator2.default)(function* (clientSecret) {\n    try {\n      var _yield$NativeStripeSd11 = yield _NativeStripeSdk.default.collectFinancialConnectionsAccounts(clientSecret),\n        session = _yield$NativeStripeSd11.session,\n        error = _yield$NativeStripeSd11.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        session: session\n      };\n    } catch (error) {\n      return {\n        error: (0, _helpers.createError)(error)\n      };\n    }\n  });\n  return function collectFinancialConnectionsAccounts(_x25) {\n    return _ref27.apply(this, arguments);\n  };\n}();\nexports.collectFinancialConnectionsAccounts = collectFinancialConnectionsAccounts;\nvar canAddCardToWallet = function () {\n  var _ref28 = (0, _asyncToGenerator2.default)(function* (params) {\n    try {\n      var _yield$NativeStripeSd12 = yield _NativeStripeSdk.default.canAddCardToWallet(params),\n        canAddCard = _yield$NativeStripeSd12.canAddCard,\n        details = _yield$NativeStripeSd12.details,\n        error = _yield$NativeStripeSd12.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        canAddCard: canAddCard,\n        details: details\n      };\n    } catch (error) {\n      return {\n        error: (0, _helpers.createError)(error)\n      };\n    }\n  });\n  return function canAddCardToWallet(_x26) {\n    return _ref28.apply(this, arguments);\n  };\n}();\nexports.canAddCardToWallet = canAddCardToWallet;\nvar isCardInWallet = function () {\n  var _ref29 = (0, _asyncToGenerator2.default)(function* (params) {\n    try {\n      var _yield$NativeStripeSd13 = yield _NativeStripeSdk.default.isCardInWallet(params),\n        isInWallet = _yield$NativeStripeSd13.isInWallet,\n        token = _yield$NativeStripeSd13.token,\n        error = _yield$NativeStripeSd13.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        isInWallet: isInWallet,\n        token: token\n      };\n    } catch (error) {\n      return {\n        error: (0, _helpers.createError)(error)\n      };\n    }\n  });\n  return function isCardInWallet(_x27) {\n    return _ref29.apply(this, arguments);\n  };\n}();\nexports.isCardInWallet = isCardInWallet;\nvar Constants = _NativeStripeSdk.default.getConstants();\nexports.Constants = Constants;\nvar isPlatformPaySupported = function () {\n  var _ref30 = (0, _asyncToGenerator2.default)(function* (params) {\n    return yield _NativeStripeSdk.default.isPlatformPaySupported(params != null ? params : {});\n  });\n  return function isPlatformPaySupported(_x28) {\n    return _ref30.apply(this, arguments);\n  };\n}();\nexports.isPlatformPaySupported = isPlatformPaySupported;\nvar confirmPlatformPaySetupIntent = function () {\n  var _ref31 = (0, _asyncToGenerator2.default)(function* (clientSecret, params) {\n    try {\n      var _ref32 = yield _NativeStripeSdk.default.confirmPlatformPay(clientSecret, params, false),\n        error = _ref32.error,\n        setupIntent = _ref32.setupIntent;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        setupIntent: setupIntent\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function confirmPlatformPaySetupIntent(_x29, _x30) {\n    return _ref31.apply(this, arguments);\n  };\n}();\nexports.confirmPlatformPaySetupIntent = confirmPlatformPaySetupIntent;\nvar confirmPlatformPayPayment = function () {\n  var _ref33 = (0, _asyncToGenerator2.default)(function* (clientSecret, params) {\n    try {\n      var _ref34 = yield _NativeStripeSdk.default.confirmPlatformPay(clientSecret, params, true),\n        error = _ref34.error,\n        paymentIntent = _ref34.paymentIntent;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        paymentIntent: paymentIntent\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function confirmPlatformPayPayment(_x31, _x32) {\n    return _ref33.apply(this, arguments);\n  };\n}();\nexports.confirmPlatformPayPayment = confirmPlatformPayPayment;\nvar dismissPlatformPay = function () {\n  var _ref35 = (0, _asyncToGenerator2.default)(function* () {\n    if (_reactNative.Platform.OS !== 'ios') {\n      return false;\n    }\n    try {\n      var didDismiss = yield _NativeStripeSdk.default.dismissPlatformPay();\n      return didDismiss;\n    } catch (error) {\n      return false;\n    }\n  });\n  return function dismissPlatformPay() {\n    return _ref35.apply(this, arguments);\n  };\n}();\nexports.dismissPlatformPay = dismissPlatformPay;\nvar createPlatformPayPaymentMethod = function () {\n  var _ref36 = (0, _asyncToGenerator2.default)(function* (params) {\n    try {\n      var _ref37 = yield _NativeStripeSdk.default.createPlatformPayPaymentMethod(params, false),\n        error = _ref37.error,\n        paymentMethod = _ref37.paymentMethod,\n        shippingContact = _ref37.shippingContact;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        paymentMethod: paymentMethod,\n        shippingContact: shippingContact\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function createPlatformPayPaymentMethod(_x33) {\n    return _ref36.apply(this, arguments);\n  };\n}();\nexports.createPlatformPayPaymentMethod = createPlatformPayPaymentMethod;\nvar createPlatformPayToken = function () {\n  var _ref38 = (0, _asyncToGenerator2.default)(function* (params) {\n    try {\n      var _ref39 = yield _NativeStripeSdk.default.createPlatformPayPaymentMethod(params, true),\n        error = _ref39.error,\n        token = _ref39.token,\n        shippingContact = _ref39.shippingContact;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {\n        token: token,\n        shippingContact: shippingContact\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function createPlatformPayToken(_x34) {\n    return _ref38.apply(this, arguments);\n  };\n}();\nexports.createPlatformPayToken = createPlatformPayToken;\nvar updatePlatformPaySheet = function () {\n  var _ref40 = (0, _asyncToGenerator2.default)(function* (params) {\n    if (_reactNative.Platform.OS !== 'ios') {\n      return {};\n    }\n    try {\n      yield _NativeStripeSdk.default.updatePlatformPaySheet(params.applePay.cartItems, params.applePay.shippingMethods, params.applePay.errors);\n      return {};\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function updatePlatformPaySheet(_x35) {\n    return _ref40.apply(this, arguments);\n  };\n}();\nexports.updatePlatformPaySheet = updatePlatformPaySheet;\nvar openPlatformPaySetup = function () {\n  var _ref41 = (0, _asyncToGenerator2.default)(function* () {\n    if (_reactNative.Platform.OS === 'ios') {\n      yield _NativeStripeSdk.default.openApplePaySetup();\n    }\n  });\n  return function openPlatformPaySetup() {\n    return _ref41.apply(this, arguments);\n  };\n}();\nexports.openPlatformPaySetup = openPlatformPaySetup;","map":null,"metadata":{},"sourceType":"script"}