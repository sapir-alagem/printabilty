{"ast":null,"code":"import { useCreatePaymentIntentMutation } from \"../paymentApi\";\nconst [createPaymentIntent] = useCreatePaymentIntentMutation(); // Fixed typo in variable name\nconst {\n  initPaymentSheet,\n  presentPaymentSheet\n} = userStripe(); // Assuming userStripe() is properly defined\n\nconst printing_details_page = props => {\n  // Function to handle checkout\n  const onCheckout = async totalAmount => {\n    // 1. Create a payment intent\n    const response = await createPaymentIntent({\n      amount: Math.floor(totalAmount * 100)\n    });\n    if (response.error) {\n      console.log(response.error);\n      Alert.alert('Something went wrong');\n      return;\n    }\n\n    // 2. Initialize the Payment sheet\n    const initResponse = await initPaymentSheet({\n      merchantDisplayName: 'Printability',\n      paymentIntentClientSecret: response.data.paymentIntent\n    });\n    if (initResponse.error) {\n      console.log(initResponse.error);\n      Alert.alert('Something went wrong');\n      return;\n    }\n\n    // 3. Present the Payment Sheet from Stripe\n    const paymentResponse = await presentPaymentSheet();\n    if (paymentResponse.error) {\n      Alert.alert(`Error code: ${paymentResponse.error.code}`, paymentResponse.error.message);\n      return;\n    }\n    // 4. If payment ok -> create the order\n    onCreateOrder();\n  };\n\n  // Function to create an order\n  const onCreateOrder = async req => {\n    // Assuming you're making a request to create an order here\n    // const result = await onCreateOrder({\n    //     fileName: req.body.fileName,\n    //     printPrice: req.body.price,\n    // })\n  };\n\n  // Inject HTML into the document\n  const injectHTML = () => {\n    const htmlContent = `\n            <!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>Checkout Button</title>\n            </head>\n            <body>\n                <!-- Input field for total amount -->\n                <label for=\"totalAmount\">Total Amount:</label>\n                <input type=\"number\" id=\"totalAmount\" name=\"totalAmount\" value=\"24.3\"> <!-- Default value set to 24.3 -->\n\n                <!-- Simulated Checkout Button -->\n                <button id=\"checkoutButton\">Checkout</button>\n\n                <script>\n                    // Attach event listener to the checkout button\n                    document.getElementById(\"checkoutButton\").addEventListener(\"click\", function() {\n                        // Get the value entered by the user in the input field\n                        var totalAmount = parseFloat(document.getElementById(\"totalAmount\").value);\n                        // Call the onCheckout function with the updated total amount\n                        onCheckout(totalAmount);\n                    });\n                    \n                    // Simulated onCheckout function\n                    function onCheckout(totalAmount) {\n                        // Here you can simulate the actions performed in the onCheckout function\n                        console.log(\"Checkout button clicked with total amount: \" + totalAmount);\n                        // Call your actual onCheckout function here if needed\n                        // For now, I'm just logging the total amount to the console\n                    }\n                </script>\n            </body>\n            </html>\n        `;\n\n    // Inject HTML content into the document\n    document.body.innerHTML = htmlContent;\n  };\n\n  // Call the function to inject HTML into the document\n  injectHTML();\n};\nexport default printing_details_page;","map":{"version":3,"names":["useCreatePaymentIntentMutation","createPaymentIntent","initPaymentSheet","presentPaymentSheet","userStripe","printing_details_page","props","onCheckout","totalAmount","response","amount","Math","floor","error","console","log","Alert","alert","initResponse","merchantDisplayName","paymentIntentClientSecret","data","paymentIntent","paymentResponse","code","message","onCreateOrder","req","injectHTML","htmlContent","document","body","innerHTML"],"sources":["C:/Users/safirma/Documents/GitHub/printabilty/frontend/src/Payments/pages/printing_details_page.js"],"sourcesContent":["import { useCreatePaymentIntentMutation } from \"../paymentApi\"; \r\n\r\n\r\nconst [createPaymentIntent] = useCreatePaymentIntentMutation(); // Fixed typo in variable name\r\nconst { initPaymentSheet, presentPaymentSheet} = userStripe(); // Assuming userStripe() is properly defined\r\n\r\nconst printing_details_page = props => {\r\n// Function to handle checkout\r\n    const onCheckout = async (totalAmount) => {\r\n        // 1. Create a payment intent\r\n        const response = await createPaymentIntent({ amount: Math.floor(totalAmount * 100) });\r\n        if (response.error) {\r\n            console.log(response.error);\r\n            Alert.alert('Something went wrong');\r\n            return;\r\n        }\r\n\r\n        // 2. Initialize the Payment sheet\r\n        const initResponse = await initPaymentSheet({\r\n            merchantDisplayName: 'Printability',\r\n            paymentIntentClientSecret: response.data.paymentIntent,\r\n        });\r\n        if (initResponse.error) {\r\n            console.log(initResponse.error);\r\n            Alert.alert('Something went wrong');\r\n            return;\r\n        }\r\n        \r\n        // 3. Present the Payment Sheet from Stripe\r\n        const paymentResponse = await presentPaymentSheet();\r\n        if (paymentResponse.error) {\r\n            Alert.alert(\r\n                `Error code: ${paymentResponse.error.code}`, \r\n                paymentResponse.error.message\r\n            );\r\n            return;\r\n        }\r\n        // 4. If payment ok -> create the order\r\n        onCreateOrder();\r\n    };\r\n\r\n    // Function to create an order\r\n    const onCreateOrder = async (req) => {\r\n        // Assuming you're making a request to create an order here\r\n        // const result = await onCreateOrder({\r\n        //     fileName: req.body.fileName,\r\n        //     printPrice: req.body.price,\r\n        // })\r\n    };\r\n\r\n    // Inject HTML into the document\r\n    const injectHTML = () => {\r\n        const htmlContent = `\r\n            <!DOCTYPE html>\r\n            <html lang=\"en\">\r\n            <head>\r\n                <meta charset=\"UTF-8\">\r\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n                <title>Checkout Button</title>\r\n            </head>\r\n            <body>\r\n                <!-- Input field for total amount -->\r\n                <label for=\"totalAmount\">Total Amount:</label>\r\n                <input type=\"number\" id=\"totalAmount\" name=\"totalAmount\" value=\"24.3\"> <!-- Default value set to 24.3 -->\r\n\r\n                <!-- Simulated Checkout Button -->\r\n                <button id=\"checkoutButton\">Checkout</button>\r\n\r\n                <script>\r\n                    // Attach event listener to the checkout button\r\n                    document.getElementById(\"checkoutButton\").addEventListener(\"click\", function() {\r\n                        // Get the value entered by the user in the input field\r\n                        var totalAmount = parseFloat(document.getElementById(\"totalAmount\").value);\r\n                        // Call the onCheckout function with the updated total amount\r\n                        onCheckout(totalAmount);\r\n                    });\r\n                    \r\n                    // Simulated onCheckout function\r\n                    function onCheckout(totalAmount) {\r\n                        // Here you can simulate the actions performed in the onCheckout function\r\n                        console.log(\"Checkout button clicked with total amount: \" + totalAmount);\r\n                        // Call your actual onCheckout function here if needed\r\n                        // For now, I'm just logging the total amount to the console\r\n                    }\r\n                </script>\r\n            </body>\r\n            </html>\r\n        `;\r\n\r\n        // Inject HTML content into the document\r\n        document.body.innerHTML = htmlContent;\r\n    };\r\n\r\n    // Call the function to inject HTML into the document\r\n    injectHTML();\r\n\r\n}\r\n\r\nexport default printing_details_page;"],"mappings":"AAAA,SAASA,8BAA8B,QAAQ,eAAe;AAG9D,MAAM,CAACC,mBAAmB,CAAC,GAAGD,8BAA8B,CAAC,CAAC,CAAC,CAAC;AAChE,MAAM;EAAEE,gBAAgB;EAAEC;AAAmB,CAAC,GAAGC,UAAU,CAAC,CAAC,CAAC,CAAC;;AAE/D,MAAMC,qBAAqB,GAAGC,KAAK,IAAI;EACvC;EACI,MAAMC,UAAU,GAAG,MAAOC,WAAW,IAAK;IACtC;IACA,MAAMC,QAAQ,GAAG,MAAMR,mBAAmB,CAAC;MAAES,MAAM,EAAEC,IAAI,CAACC,KAAK,CAACJ,WAAW,GAAG,GAAG;IAAE,CAAC,CAAC;IACrF,IAAIC,QAAQ,CAACI,KAAK,EAAE;MAChBC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACI,KAAK,CAAC;MAC3BG,KAAK,CAACC,KAAK,CAAC,sBAAsB,CAAC;MACnC;IACJ;;IAEA;IACA,MAAMC,YAAY,GAAG,MAAMhB,gBAAgB,CAAC;MACxCiB,mBAAmB,EAAE,cAAc;MACnCC,yBAAyB,EAAEX,QAAQ,CAACY,IAAI,CAACC;IAC7C,CAAC,CAAC;IACF,IAAIJ,YAAY,CAACL,KAAK,EAAE;MACpBC,OAAO,CAACC,GAAG,CAACG,YAAY,CAACL,KAAK,CAAC;MAC/BG,KAAK,CAACC,KAAK,CAAC,sBAAsB,CAAC;MACnC;IACJ;;IAEA;IACA,MAAMM,eAAe,GAAG,MAAMpB,mBAAmB,CAAC,CAAC;IACnD,IAAIoB,eAAe,CAACV,KAAK,EAAE;MACvBG,KAAK,CAACC,KAAK,CACN,eAAcM,eAAe,CAACV,KAAK,CAACW,IAAK,EAAC,EAC3CD,eAAe,CAACV,KAAK,CAACY,OAC1B,CAAC;MACD;IACJ;IACA;IACAC,aAAa,CAAC,CAAC;EACnB,CAAC;;EAED;EACA,MAAMA,aAAa,GAAG,MAAOC,GAAG,IAAK;IACjC;IACA;IACA;IACA;IACA;EAAA,CACH;;EAED;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACrB,MAAMC,WAAW,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;IAED;IACAC,QAAQ,CAACC,IAAI,CAACC,SAAS,GAAGH,WAAW;EACzC,CAAC;;EAED;EACAD,UAAU,CAAC,CAAC;AAEhB,CAAC;AAED,eAAevB,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}