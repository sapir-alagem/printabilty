{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CustomerSheetBeta = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _NativeStripeSdk = _interopRequireDefault(require(\"../NativeStripeSdk\"));\nvar eventEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.StripeSdk);\nvar fetchPaymentMethodsCallback = null;\nvar attachPaymentMethodCallback = null;\nvar detachPaymentMethodCallback = null;\nvar setSelectedPaymentOptionCallback = null;\nvar fetchSelectedPaymentOptionCallback = null;\nvar setupIntentClientSecretForCustomerAttachCallback = null;\nvar initialize = function () {\n  var _ref = (0, _asyncToGenerator2.default)(function* (params) {\n    var customerAdapterOverrides = {};\n    if (params.customerAdapter) {\n      customerAdapterOverrides = configureCustomerAdapterEventListeners(params.customerAdapter);\n    }\n    try {\n      var _yield$NativeStripeSd = yield _NativeStripeSdk.default.initCustomerSheet(params, customerAdapterOverrides),\n        error = _yield$NativeStripeSd.error;\n      if (error) {\n        return {\n          error: error\n        };\n      }\n      return {};\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function initialize(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar configureCustomerAdapterEventListeners = function configureCustomerAdapterEventListeners(customerAdapter) {\n  if (customerAdapter.fetchPaymentMethods) {\n    var _fetchPaymentMethodsC;\n    (_fetchPaymentMethodsC = fetchPaymentMethodsCallback) == null ? void 0 : _fetchPaymentMethodsC.remove();\n    fetchPaymentMethodsCallback = eventEmitter.addListener('onCustomerAdapterFetchPaymentMethodsCallback', (0, _asyncToGenerator2.default)(function* () {\n      if (customerAdapter.fetchPaymentMethods) {\n        var paymentMethods = yield customerAdapter.fetchPaymentMethods();\n        yield _NativeStripeSdk.default.customerAdapterFetchPaymentMethodsCallback(paymentMethods);\n      } else {\n        throw new Error('[@stripe/stripe-react-native] Tried to call `fetchPaymentMethods` on your CustomerAdapter, but no matching method was found.');\n      }\n    }));\n  }\n  if (customerAdapter.attachPaymentMethod) {\n    var _attachPaymentMethodC;\n    (_attachPaymentMethodC = attachPaymentMethodCallback) == null ? void 0 : _attachPaymentMethodC.remove();\n    attachPaymentMethodCallback = eventEmitter.addListener('onCustomerAdapterAttachPaymentMethodCallback', function () {\n      var _ref4 = (0, _asyncToGenerator2.default)(function* (_ref3) {\n        var paymentMethodId = _ref3.paymentMethodId;\n        if (customerAdapter.attachPaymentMethod) {\n          var paymentMethod = yield customerAdapter.attachPaymentMethod(paymentMethodId);\n          yield _NativeStripeSdk.default.customerAdapterAttachPaymentMethodCallback(paymentMethod);\n        } else {\n          throw new Error('[@stripe/stripe-react-native] Tried to call `attachPaymentMethod` on your CustomerAdapter, but no matching method was found.');\n        }\n      });\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  }\n  if (customerAdapter.detachPaymentMethod) {\n    var _detachPaymentMethodC;\n    (_detachPaymentMethodC = detachPaymentMethodCallback) == null ? void 0 : _detachPaymentMethodC.remove();\n    detachPaymentMethodCallback = eventEmitter.addListener('onCustomerAdapterDetachPaymentMethodCallback', function () {\n      var _ref6 = (0, _asyncToGenerator2.default)(function* (_ref5) {\n        var paymentMethodId = _ref5.paymentMethodId;\n        if (customerAdapter.detachPaymentMethod) {\n          var paymentMethod = yield customerAdapter.detachPaymentMethod(paymentMethodId);\n          yield _NativeStripeSdk.default.customerAdapterDetachPaymentMethodCallback(paymentMethod);\n        } else {\n          throw new Error('[@stripe/stripe-react-native] Tried to call `detachPaymentMethod` on your CustomerAdapter, but no matching method was found.');\n        }\n      });\n      return function (_x3) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n  }\n  if (customerAdapter.setSelectedPaymentOption) {\n    var _setSelectedPaymentOp;\n    (_setSelectedPaymentOp = setSelectedPaymentOptionCallback) == null ? void 0 : _setSelectedPaymentOp.remove();\n    setSelectedPaymentOptionCallback = eventEmitter.addListener('onCustomerAdapterSetSelectedPaymentOptionCallback', function () {\n      var _ref8 = (0, _asyncToGenerator2.default)(function* (_ref7) {\n        var paymentOption = _ref7.paymentOption;\n        if (customerAdapter.setSelectedPaymentOption) {\n          yield customerAdapter.setSelectedPaymentOption(paymentOption);\n          yield _NativeStripeSdk.default.customerAdapterSetSelectedPaymentOptionCallback();\n        } else {\n          throw new Error('[@stripe/stripe-react-native] Tried to call `setSelectedPaymentOption` on your CustomerAdapter, but no matching method was found.');\n        }\n      });\n      return function (_x4) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n  }\n  if (customerAdapter.fetchSelectedPaymentOption) {\n    var _fetchSelectedPayment;\n    (_fetchSelectedPayment = fetchSelectedPaymentOptionCallback) == null ? void 0 : _fetchSelectedPayment.remove();\n    fetchSelectedPaymentOptionCallback = eventEmitter.addListener('onCustomerAdapterFetchSelectedPaymentOptionCallback', (0, _asyncToGenerator2.default)(function* () {\n      if (customerAdapter.fetchSelectedPaymentOption) {\n        var paymentOption = yield customerAdapter.fetchSelectedPaymentOption();\n        yield _NativeStripeSdk.default.customerAdapterFetchSelectedPaymentOptionCallback(paymentOption);\n      } else {\n        throw new Error('[@stripe/stripe-react-native] Tried to call `fetchSelectedPaymentOption` on your CustomerAdapter, but no matching method was found.');\n      }\n    }));\n  }\n  if (customerAdapter.setupIntentClientSecretForCustomerAttach) {\n    var _setupIntentClientSec;\n    (_setupIntentClientSec = setupIntentClientSecretForCustomerAttachCallback) == null ? void 0 : _setupIntentClientSec.remove();\n    setupIntentClientSecretForCustomerAttachCallback = eventEmitter.addListener('onCustomerAdapterSetupIntentClientSecretForCustomerAttachCallback', (0, _asyncToGenerator2.default)(function* () {\n      if (customerAdapter.setupIntentClientSecretForCustomerAttach) {\n        var clientSecret = yield customerAdapter.setupIntentClientSecretForCustomerAttach();\n        yield _NativeStripeSdk.default.customerAdapterSetupIntentClientSecretForCustomerAttachCallback(clientSecret);\n      } else {\n        throw new Error('[@stripe/stripe-react-native] Tried to call `setupIntentClientSecretForCustomerAttach` on your CustomerAdapter, but no matching method was found.');\n      }\n    }));\n  }\n  return {\n    fetchPaymentMethods: !!customerAdapter.fetchPaymentMethods,\n    attachPaymentMethod: !!customerAdapter.attachPaymentMethod,\n    detachPaymentMethod: !!customerAdapter.detachPaymentMethod,\n    setSelectedPaymentOption: !!customerAdapter.setSelectedPaymentOption,\n    fetchSelectedPaymentOption: !!customerAdapter.fetchSelectedPaymentOption,\n    setupIntentClientSecretForCustomerAttach: !!customerAdapter.setupIntentClientSecretForCustomerAttach\n  };\n};\nvar present = function () {\n  var _ref11 = (0, _asyncToGenerator2.default)(function* () {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      return yield _NativeStripeSdk.default.presentCustomerSheet(params);\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function present() {\n    return _ref11.apply(this, arguments);\n  };\n}();\nvar retrievePaymentOptionSelection = function () {\n  var _ref12 = (0, _asyncToGenerator2.default)(function* () {\n    try {\n      return yield _NativeStripeSdk.default.retrieveCustomerSheetPaymentOptionSelection();\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  });\n  return function retrievePaymentOptionSelection() {\n    return _ref12.apply(this, arguments);\n  };\n}();\nfunction CustomerSheet(_ref13) {\n  var visible = _ref13.visible,\n    presentationStyle = _ref13.presentationStyle,\n    animationStyle = _ref13.animationStyle,\n    style = _ref13.style,\n    appearance = _ref13.appearance,\n    setupIntentClientSecret = _ref13.setupIntentClientSecret,\n    customerId = _ref13.customerId,\n    customerEphemeralKeySecret = _ref13.customerEphemeralKeySecret,\n    merchantDisplayName = _ref13.merchantDisplayName,\n    headerTextForSelectionScreen = _ref13.headerTextForSelectionScreen,\n    defaultBillingDetails = _ref13.defaultBillingDetails,\n    billingDetailsCollectionConfiguration = _ref13.billingDetailsCollectionConfiguration,\n    returnURL = _ref13.returnURL,\n    removeSavedPaymentMethodMessage = _ref13.removeSavedPaymentMethodMessage,\n    applePayEnabled = _ref13.applePayEnabled,\n    googlePayEnabled = _ref13.googlePayEnabled,\n    timeout = _ref13.timeout,\n    onResult = _ref13.onResult,\n    customerAdapter = _ref13.customerAdapter;\n  _react.default.useEffect(function () {\n    if (visible) {\n      initialize({\n        style: style,\n        appearance: appearance,\n        setupIntentClientSecret: setupIntentClientSecret,\n        customerId: customerId,\n        customerEphemeralKeySecret: customerEphemeralKeySecret,\n        merchantDisplayName: merchantDisplayName,\n        headerTextForSelectionScreen: headerTextForSelectionScreen,\n        defaultBillingDetails: defaultBillingDetails,\n        billingDetailsCollectionConfiguration: billingDetailsCollectionConfiguration,\n        returnURL: returnURL,\n        removeSavedPaymentMethodMessage: removeSavedPaymentMethodMessage,\n        applePayEnabled: applePayEnabled,\n        googlePayEnabled: googlePayEnabled,\n        customerAdapter: customerAdapter\n      }).then(function (initResult) {\n        if (initResult.error) {\n          onResult(initResult);\n        } else {\n          present({\n            timeout: timeout,\n            presentationStyle: presentationStyle,\n            animationStyle: animationStyle\n          }).then(function (presentResult) {\n            onResult(presentResult);\n          });\n        }\n      });\n    }\n  }, [visible]);\n  return null;\n}\nvar CustomerSheetBeta = {\n  CustomerSheet: CustomerSheet,\n  initialize: initialize,\n  present: present,\n  retrievePaymentOptionSelection: retrievePaymentOptionSelection\n};\nexports.CustomerSheetBeta = CustomerSheetBeta;","map":null,"metadata":{},"sourceType":"script"}