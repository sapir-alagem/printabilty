{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createError = createError;\nexports.unsupportedMethodMessage = exports.unregisterInput = exports.shouldAttributeExpo = exports.registerInput = exports.isiOS = exports.isAndroid = exports.focusInput = exports.currentlyFocusedInput = void 0;\nvar _reactNative = require(\"react-native\");\nvar TextInputState = require('react-native/Libraries/Components/TextInput/TextInputState');\nvar shouldAttributeExpo = function shouldAttributeExpo() {\n  try {\n    return !!_reactNative.NativeModules.NativeUnimoduleProxy;\n  } catch (_unused) {\n    return false;\n  }\n};\nexports.shouldAttributeExpo = shouldAttributeExpo;\nvar isiOS = _reactNative.Platform.OS === 'ios';\nexports.isiOS = isiOS;\nvar isAndroid = _reactNative.Platform.OS === 'android';\nexports.isAndroid = isAndroid;\nfunction createError(error) {\n  return {\n    code: error.code,\n    message: error.message,\n    localizedMessage: error.localizedMessage,\n    declineCode: error.declineCode,\n    stripeErrorCode: error.stripeErrorCode,\n    type: error.type\n  };\n}\nvar unsupportedMethodMessage = function unsupportedMethodMessage(field) {\n  return field + \" method is not supported. Consider to upgrade react-native version to 0.63.x or higher\";\n};\nexports.unsupportedMethodMessage = unsupportedMethodMessage;\nvar focusInput = function focusInput(ref) {\n  if ('focusInput' in TextInputState) {\n    TextInputState.focusInput(ref);\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('focusInput'));\n    }\n  }\n};\nexports.focusInput = focusInput;\nvar registerInput = function registerInput(ref) {\n  if ('registerInput' in TextInputState) {\n    TextInputState.registerInput(ref);\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('registerInput'));\n    }\n  }\n};\nexports.registerInput = registerInput;\nvar unregisterInput = function unregisterInput(ref) {\n  if ('unregisterInput' in TextInputState) {\n    TextInputState.unregisterInput(ref);\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('unregisterInput'));\n    }\n  }\n};\nexports.unregisterInput = unregisterInput;\nvar currentlyFocusedInput = function currentlyFocusedInput() {\n  if ('currentlyFocusedInput' in TextInputState) {\n    return TextInputState.currentlyFocusedInput();\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('currentlyFocusedInput'));\n    }\n  }\n};\nexports.currentlyFocusedInput = currentlyFocusedInput;","map":{"version":3,"names":["_reactNative","require","TextInputState","shouldAttributeExpo","NativeModules","NativeUnimoduleProxy","_unused","exports","isiOS","Platform","OS","isAndroid","createError","error","code","message","localizedMessage","declineCode","stripeErrorCode","type","unsupportedMethodMessage","field","focusInput","ref","__DEV__","console","log","registerInput","unregisterInput","currentlyFocusedInput"],"sources":["C:\\Users\\safirma\\Documents\\GitHub\\printabilty\\frontend\\node_modules\\@stripe\\stripe-react-native\\lib\\module\\helpers.ts"],"sourcesContent":["import type React from 'react';\nimport type { StripeError } from './types';\n\nimport { Platform, NativeModules } from 'react-native';\nconst TextInputState = require('react-native/Libraries/Components/TextInput/TextInputState');\n\n/**\n * Determines whether or not this library is being used inside of\n * an \"Expo\" project by identifying if Expo's native module\n * infrastructure (react-native-unimodules AKA expo-modules) is available.\n */\nexport const shouldAttributeExpo = () => {\n  try {\n    return !!NativeModules.NativeUnimoduleProxy;\n  } catch {\n    return false;\n  }\n};\n\nexport const isiOS = Platform.OS === 'ios';\nexport const isAndroid = Platform.OS === 'android';\n\nexport function createError<T>(error: StripeError<T>) {\n  return {\n    code: error.code,\n    message: error.message,\n    localizedMessage: error.localizedMessage,\n    declineCode: error.declineCode,\n    stripeErrorCode: error.stripeErrorCode,\n    type: error.type,\n  };\n}\n\nexport const unsupportedMethodMessage = (field: string) =>\n  `${field} method is not supported. Consider to upgrade react-native version to 0.63.x or higher`;\n\nexport const focusInput = (ref: React.MutableRefObject<any>) => {\n  if ('focusInput' in TextInputState) {\n    TextInputState.focusInput(ref);\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('focusInput'));\n    }\n  }\n};\n\nexport const registerInput = (ref: React.MutableRefObject<any>) => {\n  if ('registerInput' in TextInputState) {\n    TextInputState.registerInput(ref);\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('registerInput'));\n    }\n  }\n};\n\nexport const unregisterInput = (ref: React.MutableRefObject<any>) => {\n  if ('unregisterInput' in TextInputState) {\n    TextInputState.unregisterInput(ref);\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('unregisterInput'));\n    }\n  }\n};\n\nexport const currentlyFocusedInput = () => {\n  if ('currentlyFocusedInput' in TextInputState) {\n    return TextInputState.currentlyFocusedInput();\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('currentlyFocusedInput'));\n    }\n  }\n};\n"],"mappings":";;;;;AAGA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAMC,cAAc,GAAGD,OAAO,CAAC,4DAA4D,CAAC;AAOrF,IAAME,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAA,EAAS;EACvC,IAAI;IACF,OAAO,CAAC,CAACH,YAAA,CAAAI,aAAa,CAACC,oBAAoB;EAC7C,CAAE,QAAAC,OAAA,EAAM;IACN,OAAO,KAAK;EACd;AACF,CAAC;AAACC,OAAA,CAAAJ,mBAAA,GAAAA,mBAAA;AAEK,IAAMK,KAAK,GAAGR,YAAA,CAAAS,QAAQ,CAACC,EAAE,KAAK,KAAK;AAACH,OAAA,CAAAC,KAAA,GAAAA,KAAA;AACpC,IAAMG,SAAS,GAAGX,YAAA,CAAAS,QAAQ,CAACC,EAAE,KAAK,SAAS;AAACH,OAAA,CAAAI,SAAA,GAAAA,SAAA;AAE5C,SAASC,WAAWA,CAAIC,KAAqB,EAAE;EACpD,OAAO;IACLC,IAAI,EAAED,KAAK,CAACC,IAAI;IAChBC,OAAO,EAAEF,KAAK,CAACE,OAAO;IACtBC,gBAAgB,EAAEH,KAAK,CAACG,gBAAgB;IACxCC,WAAW,EAAEJ,KAAK,CAACI,WAAW;IAC9BC,eAAe,EAAEL,KAAK,CAACK,eAAe;IACtCC,IAAI,EAAEN,KAAK,CAACM;EACd,CAAC;AACH;AAEO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAIC,KAAa;EAAA,OACjDA,KAAK;AAAA,CAAwF;AAACd,OAAA,CAAAa,wBAAA,GAAAA,wBAAA;AAE5F,IAAME,UAAU,GAAG,SAAbA,UAAUA,CAAIC,GAAgC,EAAK;EAC9D,IAAI,YAAY,IAAIrB,cAAc,EAAE;IAClCA,cAAc,CAACoB,UAAU,CAACC,GAAG,CAAC;EAChC,CAAC,MAAM;IACL,IAAIC,OAAO,EAAE;MACXC,OAAO,CAACC,GAAG,CAACN,wBAAwB,CAAC,YAAY,CAAC,CAAC;IACrD;EACF;AACF,CAAC;AAACb,OAAA,CAAAe,UAAA,GAAAA,UAAA;AAEK,IAAMK,aAAa,GAAG,SAAhBA,aAAaA,CAAIJ,GAAgC,EAAK;EACjE,IAAI,eAAe,IAAIrB,cAAc,EAAE;IACrCA,cAAc,CAACyB,aAAa,CAACJ,GAAG,CAAC;EACnC,CAAC,MAAM;IACL,IAAIC,OAAO,EAAE;MACXC,OAAO,CAACC,GAAG,CAACN,wBAAwB,CAAC,eAAe,CAAC,CAAC;IACxD;EACF;AACF,CAAC;AAACb,OAAA,CAAAoB,aAAA,GAAAA,aAAA;AAEK,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAIL,GAAgC,EAAK;EACnE,IAAI,iBAAiB,IAAIrB,cAAc,EAAE;IACvCA,cAAc,CAAC0B,eAAe,CAACL,GAAG,CAAC;EACrC,CAAC,MAAM;IACL,IAAIC,OAAO,EAAE;MACXC,OAAO,CAACC,GAAG,CAACN,wBAAwB,CAAC,iBAAiB,CAAC,CAAC;IAC1D;EACF;AACF,CAAC;AAACb,OAAA,CAAAqB,eAAA,GAAAA,eAAA;AAEK,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA,EAAS;EACzC,IAAI,uBAAuB,IAAI3B,cAAc,EAAE;IAC7C,OAAOA,cAAc,CAAC2B,qBAAqB,EAAE;EAC/C,CAAC,MAAM;IACL,IAAIL,OAAO,EAAE;MACXC,OAAO,CAACC,GAAG,CAACN,wBAAwB,CAAC,uBAAuB,CAAC,CAAC;IAChE;EACF;AACF,CAAC;AAACb,OAAA,CAAAsB,qBAAA,GAAAA,qBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}