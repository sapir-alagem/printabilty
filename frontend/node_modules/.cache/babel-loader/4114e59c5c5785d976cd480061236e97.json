{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createError = createError;\nexports.unsupportedMethodMessage = exports.unregisterInput = exports.shouldAttributeExpo = exports.registerInput = exports.isiOS = exports.isAndroid = exports.focusInput = exports.currentlyFocusedInput = void 0;\nvar _reactNative = require(\"react-native\");\nvar TextInputState = require('react-native/Libraries/Components/TextInput/TextInputState');\nvar shouldAttributeExpo = function shouldAttributeExpo() {\n  try {\n    return !!_reactNative.NativeModules.NativeUnimoduleProxy;\n  } catch (_unused) {\n    return false;\n  }\n};\nexports.shouldAttributeExpo = shouldAttributeExpo;\nvar isiOS = _reactNative.Platform.OS === 'ios';\nexports.isiOS = isiOS;\nvar isAndroid = _reactNative.Platform.OS === 'android';\nexports.isAndroid = isAndroid;\nfunction createError(error) {\n  return {\n    code: error.code,\n    message: error.message,\n    localizedMessage: error.localizedMessage,\n    declineCode: error.declineCode,\n    stripeErrorCode: error.stripeErrorCode,\n    type: error.type\n  };\n}\nvar unsupportedMethodMessage = function unsupportedMethodMessage(field) {\n  return field + \" method is not supported. Consider to upgrade react-native version to 0.63.x or higher\";\n};\nexports.unsupportedMethodMessage = unsupportedMethodMessage;\nvar focusInput = function focusInput(ref) {\n  if ('focusInput' in TextInputState) {\n    TextInputState.focusInput(ref);\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('focusInput'));\n    }\n  }\n};\nexports.focusInput = focusInput;\nvar registerInput = function registerInput(ref) {\n  if ('registerInput' in TextInputState) {\n    TextInputState.registerInput(ref);\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('registerInput'));\n    }\n  }\n};\nexports.registerInput = registerInput;\nvar unregisterInput = function unregisterInput(ref) {\n  if ('unregisterInput' in TextInputState) {\n    TextInputState.unregisterInput(ref);\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('unregisterInput'));\n    }\n  }\n};\nexports.unregisterInput = unregisterInput;\nvar currentlyFocusedInput = function currentlyFocusedInput() {\n  if ('currentlyFocusedInput' in TextInputState) {\n    return TextInputState.currentlyFocusedInput();\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('currentlyFocusedInput'));\n    }\n  }\n};\nexports.currentlyFocusedInput = currentlyFocusedInput;","map":null,"metadata":{},"sourceType":"script"}